;==========================================================================
;
; CLIPPER.VSM
;
;==========================================================================




;==========================================================================
;==========================================================================
;==========================================================================
; SETUP
;==========================================================================
;==========================================================================
;==========================================================================
;
; A call to CLIPPER_BOOT at microcode boot time is needed with a return
; address register VI15.  
;
; NOP       BAL VI15, CLIPPER_BOOT
;
;==========================================================================
;
; User must set CLIPPER_MEM_BASE to beginning of clipper memory.
; The clipper needs 106 vectors of memory
;
;==========================================================================

#define CLIPPER_MEM_BASE        VUMEM_CLIPPER

;==========================================================================
;==========================================================================
;==========================================================================
; CALLING
;==========================================================================
;==========================================================================
;==========================================================================
;
; The clipper expects the user to have copied the a fan giftag to the
; CLIPPER_GIF_VERTS_0/CLIPPER_GIF_VERTS_1 addresses before calling.
;
;==========================================================================
;
; These registers are expected when calling the clipper routine.
; The clipper code backs up all needed registers except the ones 
; listed below with a 'D' which are mercilessly destroyed.  
;
; ========== Registers ==========================
;
; D VI01    Temp register
;   VI15    Address to return to after clipping
;
; D VF01    Clip space vert 0
; D VF02    Clip space vert 1
; D VF03    Clip space vert 2
; D VF04    STQa 0
; D VF05    STQa 1
; D VF06    STQa 2 
; D VF07    STQb 0
; D VF08    STQb 1
; D VF09    STQb 2
; D VF10    STQc 0
; D VF11    STQc 1
; D VF12    STQc 2
;
;   VF28    Active clip to screen matrix qword 0
;   VF29    Active clip to screen matrix qword 1
;   VF30    Active clip to screen matrix qword 2
;   VF31    Active clip to screen matrix qword 3
;
;==========================================================================
;
; Call the clipper at CLIPPER_ENTRY with a return address of VI15:
;
; NOP       BAL VI15, CLIPPER_ENTRY
;
;==========================================================================






;==========================================================================
;==========================================================================
;==========================================================================
; CLIPPER MEMORY LAYOUT  All addresses are offsets from CLIPPER_MEM_BASE
;==========================================================================
;==========================================================================
;==========================================================================
;
;       0 - CLIPPER_STACK
;           20 qwords, used to hold altered registers during clipping
;
;      20 - CLIPPER_VERTS_0
;           Holds 10, 4 component verts
;           40 qwords
;
;      60 - CLIPPER_VERTS_1
;           Holds 10, 4 component verts
;           40 qwords
;
;     100 - CLIPPER_PLANES
;           Holds 6 qwords that contain plane clipping info
;           X = +1.0/-1.0;  Y = Clip Mask, Z = Clip Mask, W = Component Jump address
;
;     106
;
;==========================================================================
        
#define CLIPPER_STACK              (CLIPPER_MEM_BASE)
#define CLIPPER_VERTS_0            (CLIPPER_STACK+20)
#define CLIPPER_VERTS_1            (CLIPPER_VERTS_0+40)
#define CLIPPER_PLANES             (CLIPPER_VERTS_1+40)

;
; NEED 106 VECTORS
;

;==========================================================================
;
; CLIPPER
;
;==========================================================================
;   VI00    Const (0)
;I  VI01    (Temp)
;I  VI02    (Temp) - Address of solved 3 verts to grab rgbs from 
;I  VI03    Address to return to after clipping
;I  VI04    PlaneTestFlags / Dest address of final clipped fan
;S  VI05    Current Src clip vert buffer addr
;S  VI06    Current Dst clip vert buffer addr
;S  VI07    Num src clip verts
;S  VI08    Num dst clip verts
;S  VI09    (Temp)
;S  VI10    Component to clip by, X=0, Y=1, Z=2
;S  VI11    Curr clip flag    
;S  VI12    Next clip flag
;S  VI13    (Temp) - Loop through planes
;S  VI14    Src clip vert buffer base
;S  VI15    Dst clip vert buffer base
;==========================================================================
;   VF00    Const x=0 y=0 z=0 w=1
;I  VF01    Clip   XYZ 0  /  Current Vert STa
;I  VF02    Clip   XYZ 1  /  Current Vert STb
;I  VF03    Clip   XYZ 2  /  Current Vert STc
;I  VF04    Source STa 0  /  Next    Vert STa
;I  VF05    Source STa 1  /  Next    Vert STb
;I  VF06    Source STa 2  /  Next    Vert STc
;I  VF07    Source STb 0  /  Interpolated STa
;I  VF08    Source STb 1  /  Interpolated STb
;I  VF09    Source STb 2  /  Interpolated STc
;S  VF10    Source STc 0  /  Current Vert XYZ
;S  VF11    Source STc 1  /  Next    Vert XYZ
;S  VF12    Source STc 2  /  Interpolated XYZ
;S  VF13    Plane value -1,1
;S  VF14    ZERO
;   VF15    
;   VF16    
;   VF17    
;   VF18    
;   VF19    
;   VF20    Active local to screen matrix qword 0
;   VF21    Active local to screen matrix qword 1
;   VF22    Active local to screen matrix qword 2
;   VF23    Active local to screen matrix qword 3
;   VF24    Active local to clip matrix qword 0 
;   VF25    Active local to clip matrix qword 1 
;   VF26    Active local to clip matrix qword 2 
;   VF27    Active local to clip matrix qword 3 
;   VF28    Active clip to screen matrix qword 0
;   VF29    Active clip to screen matrix qword 1
;   VF30    Active clip to screen matrix qword 2
;   VF31    Active clip to screen matrix qword 3
;==========================================================================

;------------------------------------------------------------------------
;   BACKUP ALL NEEDED REGISTERS
;------------------------------------------------------------------------
CLIPPER_ENTRY:

        ; Increment clipped tri counter
        ;NOP                             ILW.x VI01, 1022(VI00)
        ;NOP                             IADDIU VI01, VI01, 1
        ;NOP                             ISW.x VI01, 1022(VI00)

        NOP                             IADDIU VI01, VI00, CLIPPER_STACK
;        NOP                             SQ.xyzw VF07, 0(VI01)
;        NOP                             SQ.xyzw VF08, 1(VI01)
;        NOP                             SQ.xyzw VF09, 2(VI01)
        NOP                             SQ.xyzw VF10, 3(VI01)
        NOP                             SQ.xyzw VF11, 4(VI01)
        NOP                             SQ.xyzw VF12, 5(VI01)
        NOP                             SQ.xyzw VF13, 6(VI01)
        NOP                             SQ.xyzw VF14, 7(VI01)
        NOP                             ISW.x   VI05, 8(VI01)
        NOP                             ISW.y   VI06, 8(VI01)
        NOP                             ISW.z   VI07, 8(VI01)
        NOP                             ISW.w   VI08, 8(VI01)
        NOP                             ISW.x   VI09, 9(VI01)
        NOP                             ISW.y   VI10, 9(VI01)
        NOP                             ISW.z   VI11, 9(VI01)
        NOP                             ISW.w   VI12, 9(VI01)
        NOP                             ISW.x   VI13,10(VI01)
        NOP                             ISW.y   VI14,10(VI01)
        NOP                             ISW.z   VI15,10(VI01)
        NOP                             ISW.w   VI04,10(VI01)

        NOP                             SQ      VF01, 11(VI01)
        NOP                             SQ      VF02, 12(VI01)
        NOP                             SQ      VF03, 13(VI01)
        NOP                             SQ      VF04, 14(VI01)
        NOP                             SQ      VF05, 15(VI01)
        NOP                             SQ      VF06, 16(VI01)
        NOP                             SQ      VF07, 17(VI01)
        NOP                             SQ      VF08, 18(VI01)
        NOP                             SQ      VF09, 19(VI01)

;------------------------------------------------------------------------
;
;   WRITE INITIAL VERTS TO CLIP BUFFER
;
;   STQa, STQb, STQc, XYZ
;------------------------------------------------------------------------

        SUB.xyzw VF14, VF14, VF14       NOP
        NOP                             IADDIU VI14, VI00, CLIPPER_VERTS_0  ; set src base addr
        NOP                             IADDIU VI15, VI00, CLIPPER_VERTS_1  ; set dst base addr
        NOP                             IADDIU VI07, VI00, 3                ; set nsrc
        NOP                             IADD   VI12, VI00, VI14

        NOP                             SQ.xyzw VF04, (0*4+0)(VI12)  ; STa0
        NOP                             SQ.xyzw VF05, (1*4+0)(VI12)  ; STa1
        NOP                             SQ.xyzw VF06, (2*4+0)(VI12)  ; STa2
        NOP                             SQ.xyzw VF04, (3*4+0)(VI12)  ; STa0 

        NOP                             SQ.xyzw VF07, (0*4+1)(VI12)  ; STb0
        NOP                             SQ.xyzw VF08, (1*4+1)(VI12)  ; STb1
        NOP                             SQ.xyzw VF09, (2*4+1)(VI12)  ; STb2
        NOP                             SQ.xyzw VF07, (3*4+1)(VI12)  ; STb0

        NOP                             SQ.xyzw VF10, (0*4+2)(VI12)  ; STc0
        NOP                             SQ.xyzw VF11, (1*4+2)(VI12)  ; STc1
        NOP                             SQ.xyzw VF12, (2*4+2)(VI12)  ; STc2
        NOP                             SQ.xyzw VF10, (3*4+2)(VI12)  ; STc0

        NOP                             SQ.xyzw VF01, (0*4+3)(VI12)  ; XYZ0
        NOP                             SQ.xyzw VF02, (1*4+3)(VI12)  ; XYZ1
        NOP                             SQ.xyzw VF03, (2*4+3)(VI12)  ; XYZ2
        NOP                             SQ.xyzw VF01, (3*4+3)(VI12)  ; XYZ0

;------------------------------------------------------------------------
; LOOP THROUGH THE SIX PLANES
;------------------------------------------------------------------------

        NOP                             IADDIU  VI13, VI00, 6
        NOP                             IADDIU  VI04, VI00, 0xFF            ; Be sure to need plane

PLANE_LOOP:   
        NOP                             IADDI   VI13, VI13, -1
        NOP                             IADDIU  VI01, VI13, CLIPPER_PLANES

        ; Load clipping plane info from table                                                
        NOP                             ILW.z   VI12, 0(VI01)               ; read next mask from table
        NOP                             ILW.y   VI11, 0(VI01)               ; read curr mask from table
        NOP                             ILW.w   VI10, 0(VI01)               ; read component rot from table
        NOP                             LQ.xyzw VF13, 0(VI01)               ; read plane sign from table

        ; Check if we can skip testing against this plane
        NOP                             IBEQ    VI04, VI00, PLANE_SKIP_ALL
        NOP                             IAND    VI01, VI04, VI12            ; test plane bits with next mask
        NOP                             NOP
        NOP                             IBEQ    VI01, VI00, PLANE_SKIP

        ; Increment num planes clipped against
        ;NOP                             ILW.z VI01, 1022(VI00)
        ;NOP                             IADDIU VI01, VI01, 1
        ;NOP                             ISW.z VI01, 1022(VI00)

        ; Setup initial src and dst vert buffers
        NOP                             IADD    VI05, VI00, VI14            ; src clip vert buffer addr
        NOP                             IADD    VI06, VI00, VI15            ; dst clip vert buffer addr
        NOP                             IADDIU  VI08, VI00, 0               ; clear ndst
        NOP                             LQ.xyzw VF04, 0(VI05)               ; load first vert into 'next'
        NOP                             LQ.xyzw VF05, 1(VI05)               ; load first vert into 'next'
        NOP                             LQ.xyzw VF06, 2(VI05)               ; load first vert into 'next'
        NOP                             LQ.xyzw VF11, 3(VI05)               ; load first vert XYZ into 'next'
        NOP                             IADDIU VI05, VI05, 4
        NOP                             NOP
        NOP                             NOP

        ; Clear VI04 and re-accumulate plane bits
        NOP                             IADDIU VI04, VI00, 0
        
        ;NOP                             B CLIPPER_RESTORE_RET   ;*****************************************
        ;NOP                             NOP                     ;*****************************************

PLANE_VERT_LOOP:        

        NOP                             BAL VI02, CLIP_SEG_ENTER            ; get next and check segment
        NOP                             ISUBIU VI07, VI07, 1                ; dec num src verts
        NOP                             NOP
        NOP                             IBNE VI07, VI00, PLANE_VERT_LOOP    ; do loop
        NOP                             NOP
        
        ; Duplicate first vert on end
        NOP                             LQ  VF01, 0(VI15)
        NOP                             LQ  VF02, 1(VI15)
        NOP                             LQ  VF03, 2(VI15)
        NOP                             SQI VF01, (VI06++)
        NOP                             LQ  VF01, 3(VI15)
        NOP                             SQI VF02, (VI06++)
        NOP                             SQI VF03, (VI06++)
        NOP                             SQI VF01, (VI06++)
        
        ; Flip source and dest ptr/counts
        NOP                             IADD VI07, VI08, VI00            ; copy ndst into nsrc
        NOP                             IADD VI08, VI00, VI00            ; set ndst to zero
        NOP                             IADD VI01, VI14, VI00            ; flip src/dst buffers
        NOP                             IADD VI14, VI15, VI00
        NOP                             IADD VI15, VI01, VI00

        ; Check if we hit 0 verts
        NOP                             IBEQ VI07, VI00, CLIPPER_RESTORE_RET
        NOP                             NOP
   
PLANE_SKIP:   
        
        ; Check if we have clipped to all planes
        NOP                             IBNE VI13, VI00, PLANE_LOOP
        NOP                             NOP

;------------------------------------------------------------------------
;   Transform clipped verts into final buffer
;------------------------------------------------------------------------
PLANE_SKIP_ALL:

;------------------------------------------------------------------------
;   RESTORE ALL NEEDED REGISTERS
;------------------------------------------------------------------------

CLIPPER_RESTORE_RET:

; Clipper returned VI01==NVerts, VI02==Ptr to verts
        NOP                             IADD VI01, VI00, VI07
        NOP                             IADD VI02, VI00, VI14

        NOP                             IADDIU VI03, VI00, CLIPPER_STACK
;        NOP                             LQ.xyzw VF07, 0(VI03)
;        NOP                             LQ.xyzw VF08, 1(VI03)
;        NOP                             LQ.xyzw VF09, 2(VI03)
        NOP                             LQ.xyzw VF10, 3(VI03)
        NOP                             LQ.xyzw VF11, 4(VI03)
        NOP                             LQ.xyzw VF12, 5(VI03)
        NOP                             LQ.xyzw VF13, 6(VI03)
        NOP                             LQ.xyzw VF14, 7(VI03)
        NOP                             ILW.x   VI05, 8(VI03)
        NOP                             ILW.y   VI06, 8(VI03)
        NOP                             ILW.z   VI07, 8(VI03)
        NOP                             ILW.w   VI08, 8(VI03)
        NOP                             ILW.x   VI09, 9(VI03)
        NOP                             ILW.y   VI10, 9(VI03)
        NOP                             ILW.z   VI11, 9(VI03)
        NOP                             ILW.w   VI12, 9(VI03)
        NOP                             ILW.x   VI13,10(VI03)
        NOP                             ILW.y   VI14,10(VI03)
        NOP                             ILW.z   VI15,10(VI03)
        NOP                             ILW.w   VI04,10(VI03)
        NOP                             LQ      VF01, 11(VI03)
        NOP                             LQ      VF02, 12(VI03)
        NOP                             LQ      VF03, 13(VI03)
        NOP                             LQ      VF04, 14(VI03)
        NOP                             LQ      VF05, 15(VI03)
        NOP                             LQ      VF06, 16(VI03)
        NOP                             LQ      VF07, 17(VI03)
        NOP                             LQ      VF08, 18(VI03)
        NOP                             LQ      VF09, 19(VI03)

;------------------------------------------------------------------------
;   RETURN TO CALLER
;------------------------------------------------------------------------
CLIPPER_RET:
        NOP                             JR VI15
        NOP                             NOP


;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;   CHECK SEGMENT AND DO CLIPPING OF NECESSARY
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;==========================================================================
;   VF00    Const x=0 y=0 z=0 w=1
;I  VF01    Clip   XYZ 0  /  Current Vert STa
;I  VF02    Clip   XYZ 1  /  Current Vert STb
;I  VF03    Clip   XYZ 2  /  Current Vert STc
;I  VF04    Source STa 0  /  Next    Vert STa
;I  VF05    Source STa 1  /  Next    Vert STb
;I  VF06    Source STa 2  /  Next    Vert STc
;I  VF07    Source STb 0  /  Interpolated STa
;I  VF08    Source STb 1  /  Interpolated STb
;I  VF09    Source STb 2  /  Interpolated STc
;S  VF10    Source STc 0  /  Current Vert XYZ
;S  VF11    Source STc 1  /  Next    Vert XYZ
;S  VF12    Source STc 2  /  Interpolated XYZ
;S  VF13    Plane value -1,1
;S  VF14    ZERO


#define Curr_ST1(__x__)		VF01 ## __x__
#define Curr_ST2(__x__)		VF02 ## __x__
#define Curr_ST3(__x__)		VF03 ## __x__
#define Curr_XYZ(__x__)		VF10 ## __x__

#define Next_ST1(__x__)		VF04 ## __x__
#define Next_ST2(__x__)		VF05 ## __x__
#define Next_ST3(__x__)		VF06 ## __x__
#define Next_XYZ(__x__)		VF11 ## __x__

#define Clip_ST1(__x__)		VF07 ## __x__
#define Clip_ST2(__x__)		VF08 ## __x__
#define Clip_ST3(__x__)		VF09 ## __x__
#define Clip_XYZ(__x__)		VF12 ## __x__

#define ZERO				VF14
#define TEMP				VF15

#define PlaneBits			VI04
#define ClipBits			VI09
#define CurrMask			VI11
#define NextMask			VI12

#define SWAP				1

CLIP_SEG_ENTER:

        ADD.xyzw Curr_XYZ(xyzw), ZERO, Next_XYZ(xyzw)       		LQ.xyzw Next_XYZ(xyzw), 3(VI05)               	; move next into current
        ADD.xyzw Curr_ST1(xyzw), ZERO, Next_ST1(xyzw)       		LQ.xyzw Next_ST1(xyzw), 0(VI05)               	; and load next
        ADD.xyzw Curr_ST2(xyzw), ZERO, Next_ST2(xyzw)       		LQ.xyzw Next_ST2(xyzw), 1(VI05)               
        ADD.xyzw Curr_ST3(xyzw), ZERO, Next_ST3(xyzw)				LQ.xyzw Next_ST3(xyzw), 2(VI05)
        NOP                             							IADDIU VI05, VI05, 4
        CLIPw.xyz Curr_XYZ(xyz), Curr_XYZ(w)   						NOP
        CLIPw.xyz Next_XYZ(xyz), Next_XYZ(w)						NOP

		NOP                             							NOP
        NOP                             							NOP
        NOP                             							NOP
        NOP                             							FCGET VI01										; get copy of clip flags
        NOP                             							IAND ClipBits, VI01, CurrMask          			; check if current is in
        NOP                             							IOR  PlaneBits, PlaneBits, VI01        			; BDS for IAND, collect bits for plane culling
        NOP                             							IBNE ClipBits, VI00, CLIP_SEG_CURR_OUT 			; Branch if curr is out
        NOP                             							IAND ClipBits, VI01, NextMask					; BDS, check if next is in

        NOP                             							SQI.xyzw Curr_ST1(xyzw), (VI06++)				; add current to output
        NOP                             							SQI.xyzw Curr_ST2(xyzw), (VI06++)   			
        NOP                             							SQI.xyzw Curr_ST3(xyzw), (VI06++)   			
        NOP                             							SQI.xyzw Curr_XYZ(xyzw), (VI06++)   			
        NOP                             							IADDIU VI08, VI08, 1                			
		NOP															IADD ClipBits, ClipBits, NextMask				; toggle clip bit
		NOP															IAND ClipBits, ClipBits, NextMask				; add/and is like xor

;------------------------------------------------------------------------

        NOP                             							NOP
		NOP															IBNE ClipBits, VI00, CLIP_SEG_EXIT2				; if bit is set, skip intersection
        NOP                             							NOP                                				

#if SWAP        
		NOP															MOVE TEMP, Curr_ST1(xyzw)
		NOP															MOVE Curr_ST1(xyzw), Next_ST1(xyzw)
		NOP															MOVE Next_ST1(xyzw), TEMP
		NOP															MOVE TEMP, Curr_ST2(xyzw)
		NOP															MOVE Curr_ST2(xyzw), Next_ST2(xyzw)
		NOP															MOVE Next_ST2(xyzw), TEMP
		NOP															MOVE TEMP, Curr_ST3(xyzw)
		NOP															MOVE Curr_ST3(xyzw), Next_ST3(xyzw)
		NOP															MOVE Next_ST3(xyzw), TEMP
		NOP															MOVE TEMP, Curr_XYZ(xyzw)
		NOP															MOVE Curr_XYZ(xyzw), Next_XYZ(xyzw)
		NOP															MOVE Next_XYZ(xyzw), TEMP
#endif
		
		NOP                             							BAL VI01, INTERPOLATE              				; branch to segment intersection
        NOP                             							NOP                                				
        CLIPw.xyz Clip_XYZ(xyz), Clip_XYZ(w)						NOP                                				; get clip flags for new point
		NOP                             							SQI Clip_ST1(xyzw), (VI06++)       				; store new point
        NOP                             							SQI Clip_ST2(xyzw), (VI06++)                 				
        NOP                             							SQI Clip_ST3(xyzw), (VI06++)                 				
        NOP                             							SQI Clip_XYZ(xyzw), (VI06++)                 				
        NOP                             							IADDIU VI08, VI08, 1               				
        NOP                             							FCGET VI01                         				; get copy of clip flags
        NOP                             							IOR  PlaneBits, PlaneBits, VI01    				; collect bits for plane culling

#if SWAP		
		NOP															MOVE TEMP, Curr_ST1(xyzw)
		NOP															MOVE Curr_ST1(xyzw), Next_ST1(xyzw)
		NOP															MOVE Next_ST1(xyzw), TEMP
		NOP															MOVE TEMP, Curr_ST2(xyzw)
		NOP															MOVE Curr_ST2(xyzw), Next_ST2(xyzw)
		NOP															MOVE Next_ST2(xyzw), TEMP
		NOP															MOVE TEMP, Curr_ST3(xyzw)
		NOP															MOVE Curr_ST3(xyzw), Next_ST3(xyzw)
		NOP															MOVE Next_ST3(xyzw), TEMP
		NOP															MOVE TEMP, Curr_XYZ(xyzw)
		NOP															MOVE Curr_XYZ(xyzw), Next_XYZ(xyzw)
		NOP															MOVE Next_XYZ(xyzw), TEMP
#endif
		
CLIP_SEG_EXIT2:

        NOP                             							JR VI02
        NOP                             							NOP
;------------------------------------------------------------------------





CLIP_SEG_CURR_OUT: ; Current is outside
        
        NOP                             							NOP
		NOP															IBNE ClipBits, VI00, CLIP_SEG_EXIT				; if bit is set, skip intersection
        NOP                             							NOP                                				
        NOP                             							BAL VI01, INTERPOLATE              				; branch to segment intersection
        NOP                             							NOP                                				
        CLIPw.xyz Clip_XYZ(xyz), Clip_XYZ(w)						NOP                                				; get clip flags for new point
		NOP                             							SQI Clip_ST1(xyzw), (VI06++)       				; store new point
        NOP                             							SQI Clip_ST2(xyzw), (VI06++)                 				
        NOP                             							SQI Clip_ST3(xyzw), (VI06++)                 				
        NOP                             							SQI Clip_XYZ(xyzw), (VI06++)                 				
        NOP                             							IADDIU VI08, VI08, 1               				
        NOP                             							FCGET VI01                         				; get copy of clip flags
        NOP                             							IOR  PlaneBits, PlaneBits, VI01    				; collect bits for plane culling
		
CLIP_SEG_EXIT:

        NOP                             							JR VI02
        NOP                             							NOP
        
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;   DO INTERSECTION CALCULATION
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;==========================================================================
;   VF00    Const x=0 y=0 z=0 w=1
;I  VF01    Clip   XYZ 0  /  Current Vert STa
;I  VF02    Clip   XYZ 1  /  Current Vert STb
;I  VF03    Clip   XYZ 2  /  Current Vert STc
;I  VF04    Source STa 0  /  Next    Vert STa
;I  VF05    Source STa 1  /  Next    Vert STb
;I  VF06    Source STa 2  /  Next    Vert STc
;I  VF07    Source STb 0  /  Interpolated STa
;I  VF08    Source STb 1  /  Interpolated STb
;I  VF09    Source STb 2  /  Interpolated STc
;S  VF10    Source STc 0  /  Current Vert XYZ
;S  VF11    Source STc 1  /  Next    Vert XYZ
;S  VF12    Source STc 2  /  Interpolated XYZ
;S  VF13    Plane value -1,1
;S  VF14    ZERO

INTERPOLATE:

		MULx.w VF08w, VF11w, VF13x      							NOP 							; S * Nw
		MULx.w VF07w, VF10w, VF13x      							NOP								; S * Cw
		SUBw.xyzw VF08, VF11, VF08w     							NOP 							; Nxyz - S*Nw
		SUBw.xyzw VF07, VF10, VF07w     							NOP 							; Cxyz - S*Cw
		SUB.xyzw VF08, VF08, VF07       							NOP 							; (Nxyz-S*Nw) - (Cxyz-S*Cw)
		ABS.xyz VF07, VF07											NOP
		ABS.xyz VF08, VF08											NOP

        NOP                             							IADDIU VI09, VI10, 0
        NOP                             							NOP
        NOP                             							IBEQ VI09, VI00, NOROT
        NOP                             							NOP
ROT:                                    							
        NOP                             							ISUBIU VI09, VI09, 1
        NOP                             							MR32.xyzw VF07, VF07			
        NOP                             							MR32.xyzw VF08, VF08
        NOP                             							IBNE VI09, VI00, ROT
        NOP                             							NOP        
NOROT:                                  							
		NOP                             							NOP
        NOP                             							NOP
        NOP                             							NOP
        NOP                             							DIV Q, VF07x, VF08x				; T = (C? - S*Cw) / ((N?-S*Nw) - (C?-S*Cw))
        SUB.xyzw Clip_ST1(xyzw), Next_ST1(xyzw), Curr_ST1(xyzw)     NOP								; N - C
        SUB.xyzw Clip_ST2(xyzw), Next_ST2(xyzw), Curr_ST2(xyzw)     NOP								; N - C
        SUB.xyzw Clip_ST3(xyzw), Next_ST3(xyzw), Curr_ST3(xyzw)     NOP								; N - C
        SUB.xyzw Clip_XYZ(xyzw), Next_XYZ(xyzw), Curr_XYZ(xyzw)		NOP								; N - C
        NOP                             							WAITQ                   		
        MULQ Clip_ST1(xyzw), Clip_ST1(xyzw), Q						NOP								; T*(N-C)
        MULQ Clip_ST2(xyzw), Clip_ST2(xyzw), Q						NOP								; T*(N-C)
        MULQ Clip_ST3(xyzw), Clip_ST3(xyzw), Q						NOP								; T*(N-C)
        MULQ Clip_XYZ(xyzw), Clip_XYZ(xyzw), Q	     				NOP								; T*(N-C)
        ADD.xyzw Clip_ST1(xyzw), Curr_ST1(xyzw), Clip_ST1(xyzw)		NOP								; C + T*(N-C)
        ADD.xyzw Clip_ST2(xyzw), Curr_ST2(xyzw), Clip_ST2(xyzw)		NOP								; C + T*(N-C)
        ADD.xyzw Clip_ST3(xyzw), Curr_ST3(xyzw), Clip_ST3(xyzw)		NOP								; C + T*(N-C)
        ADD.xyzw Clip_XYZ(xyzw), Curr_XYZ(xyzw), Clip_XYZ(xyzw)		NOP								; C + T*(N-C)
							
        NOP                             							JR VI01
        NOP                             							NOP

;------------------------------------------------------------------------

CLIPPER_BOOT:

        ; Store clipping planes out as data
        NOP                             IADDIU VI04, VI00, CLIPPER_PLANES
        ADDw.x VF01x, VF00x, VF00w      NOP     ; X=+1
        SUBw.x VF02x, VF00x, VF00w      NOP     ; X=-1

        ; Y+,Y-
        NOP                             IADDIU VI01, VI00, 0x100
        NOP                             IADDIU VI02, VI00, 0x004
        NOP                             IADDIU VI03, VI00, 1;2;1
        NOP                             SQ     VF01, 0(VI04)
        NOP                             ISW.y  VI01, 0(VI04)
        NOP                             ISW.z  VI02, 0(VI04)
        NOP                             ISW.w  VI03, 0(VI04)
        NOP                             IADDIU VI01, VI00, 0x200
        NOP                             IADDIU VI02, VI00, 0x008
        NOP                             SQ     VF02, 1(VI04)
        NOP                             ISW.y  VI01, 1(VI04)
        NOP                             ISW.z  VI02, 1(VI04)
        NOP                             ISW.w  VI03, 1(VI04)
        
        ; X+,X-
        NOP                             IADDIU VI01, VI00, 0x040
        NOP                             IADDIU VI02, VI00, 0x001
        NOP                             IADDIU VI03, VI00, 0;4;0
        NOP                             SQ     VF01, 2(VI04)
        NOP                             ISW.y  VI01, 2(VI04)
        NOP                             ISW.z  VI02, 2(VI04)
        NOP                             ISW.w  VI03, 2(VI04)
        NOP                             IADDIU VI01, VI00, 0x080
        NOP                             IADDIU VI02, VI00, 0x002
        NOP                             SQ     VF02, 3(VI04)
        NOP                             ISW.y  VI01, 3(VI04)
        NOP                             ISW.z  VI02, 3(VI04)
        NOP                             ISW.w  VI03, 3(VI04)
        
        ; Z+,Z-
        NOP                             IADDIU VI01, VI00, 0x400
        NOP                             IADDIU VI02, VI00, 0x010
        NOP                             IADDIU VI03, VI00, 2;0;2
        NOP                             SQ     VF01, 4(VI04)
        NOP                             ISW.y  VI01, 4(VI04)
        NOP                             ISW.z  VI02, 4(VI04)
        NOP                             ISW.w  VI03, 4(VI04)
        NOP                             IADDIU VI01, VI00, 0x800
        NOP                             IADDIU VI02, VI00, 0x020
        NOP                             SQ     VF02, 5(VI04)
        NOP                             ISW.y  VI01, 5(VI04)
        NOP                             ISW.z  VI02, 5(VI04)
        NOP                             ISW.w  VI03, 5(VI04)

        ; Build a dummy giftag 
        ;;SUB.xyzw VF01, VF00, VF00       NOP
        ;;NOP                             SQ VF01, CLIPPER_GIF_STALL(VI00)
        ;;NOP                             IADDIU VI01, VI00, 0x7FFF           
        ;;NOP                             IADDIU VI01, VI01, 0x01
        ;;NOP                             ISW.x VI01, CLIPPER_GIF_STALL(VI00)

        NOP                             JR VI15
        NOP                             NOP
