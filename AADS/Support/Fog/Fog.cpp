//==============================================================================
//  Fog.cpp
//==============================================================================

//==============================================================================
//  INCLUDES
//==============================================================================

#include "Fog.hpp"

//==============================================================================
//  FUNCTIONS
//==============================================================================

fog::fog( void )
{
}

//==============================================================================

fog::~fog( void )
{
}

//==============================================================================

void fog::Load( token_stream& TOK )
{
    s32 i, N;

    for( i = 0; i < 14; i++ )
        TOK.Read();

    N = TOK.Read();

    for( i = 0; i < N*3; i++ )
        TOK.Read();
}

//==============================================================================

void fog::Load( const char*  )
{
}

//==============================================================================

void fog::Unload( void )
{
}

//==============================================================================

void fog::SaveSettings( const char*  )
{
}

//==============================================================================

void fog::LoadSettings( const char*  )
{
}

//==============================================================================

void fog::SetEyePos( const vector3&  )
{
}

//==============================================================================

void fog::SetMinMaxY( f32 , f32  )
{
}

//==============================================================================

xcolor fog::ComputeFog( f32 , f32  ) const
{
    return( XCOLOR_WHITE );
}

//==============================================================================

xcolor fog::ComputeFog( const vector3&  ) const
{
    return( XCOLOR_WHITE );
}

//==============================================================================

xcolor fog::ComputeParticleFog( const vector3&  ) const
{
    return( XCOLOR_WHITE );
}

//==============================================================================

void fog::ComputeUVs( f32 Dist, f32 DeltaY, f32& U, f32& V ) const
{
}

//==============================================================================

void fog::ComputeUVs( const vector3& , f32& , f32&  ) const
{
}

//==============================================================================

void fog::RenderFogMap( void ) const
{
}

//==============================================================================

void fog::GetFogConst( f32& , f32& , f32& , f32&  ) const
{
}

//==============================================================================

f32 fog::GetVisDistance( void ) const
{
    return( 600.0f );
}

//==============================================================================

xcolor fog::GetHazeColor( void ) const
{
    return( XCOLOR_WHITE );
}

//==============================================================================

void fog::GetHazeAngles( radian& , radian&  ) const
{
}

//==============================================================================