;==========================================================================
;
; CLIPPER.VSM
;
; This clipper clips and renders one triangle.  It is advised to do both
; trivial rejection and acceptance before calling the clipper.
;
;==========================================================================




;==========================================================================
;==========================================================================
;==========================================================================
; SETUP
;==========================================================================
;==========================================================================
;==========================================================================
;
; A call to CLIPPER_BOOT at microcode boot time is needed with a return
; address register VI15.  
;
; NOP       BAL VI15, CLIPPER_BOOT
;
;==========================================================================
;
; User must set CLIPPER_MEM_BASE to beginning of clipper memory.
; The clipper needs 135 vectors of memory
;
;==========================================================================

.equ CLIPPER_MEM_BASE,          872






;==========================================================================
;==========================================================================
;==========================================================================
; CALLING
;==========================================================================
;==========================================================================
;==========================================================================
;
; The clipper expects the user to have copied the a fan giftag to the
; CLIPPER_GIF_VERTS_0/CLIPPER_GIF_VERTS_1 addresses before calling.
;
;==========================================================================
;
; These registers are expected when calling the clipper routine.
; The clipper code backs up all needed registers except the ones 
; listed below with a 'D' which are mercilessly destroyed.  
;
; ========== Registers ==========================
;
; D VI01    Temp register
;   VI15    Address to return to after clipping
;
; D VF01    Clip space vert 0
; D VF02    Clip space vert 1
; D VF03    Clip space vert 2
; D VF04    ST  0
; D VF05    ST  1
; D VF06    ST  2 
; D VF07    RGB 0 - integer
; D VF08    RGB 1
; D VF09    RGB 2
;
;   VF28    Active clip to screen matrix qword 0
;   VF29    Active clip to screen matrix qword 1
;   VF30    Active clip to screen matrix qword 2
;   VF31    Active clip to screen matrix qword 3
;
;==========================================================================
;
; Call the clipper at CLIPPER_ENTRY with a return address of VI15:
;
; NOP       BAL VI15, CLIPPER_ENTRY
;
;==========================================================================






;==========================================================================
;==========================================================================
;==========================================================================
; CLIPPER MEMORY LAYOUT  All addresses are offsets from CLIPPER_MEM_BASE
;==========================================================================
;==========================================================================
;==========================================================================
;
;       0 - CLIPPER_STACK
;           12 qwords, used to hold altered registers during clipping
;
;      12 - CLIPPER_VERTS_0
;           Holds 10, 3 component verts
;           30 qwords
;
;      42 - CLIPPER_VERTS_1
;           Holds 10, 3 component verts
;           30 qwords
;
;      72 - CLIPPER_GIF_VERTS_0
;           1 Giftag and Holds 9, 3 component verts
;           28 qwords
;
;     100 - CLIPPER_GIF_VERTS_1
;           1 Giftag and Holds 9, 3 component verts
;           28 qwords
;
;     128 - CLIPPER_PLANES
;           Holds 6 qwords that contain plane clipping info
;           X = +1.0/-1.0;  Y = Clip Mask, Z = Clip Mask, W = Component Jump address
;
;     134 - CLIPPER_GIF_STALL
;
;==========================================================================
        
.equ CLIPPER_STACK,             (CLIPPER_MEM_BASE+0)
.equ CLIPPER_VERTS_0,           (CLIPPER_MEM_BASE+12)
.equ CLIPPER_VERTS_1,           (CLIPPER_MEM_BASE+42)
.equ CLIPPER_GIF_VERTS_0,       (CLIPPER_MEM_BASE+72)
.equ CLIPPER_GIF_VERTS_1,       (CLIPPER_MEM_BASE+100)
.equ CLIPPER_PLANES,            (CLIPPER_MEM_BASE+128)
.equ CLIPPER_GIF_STALL,         (CLIPPER_MEM_BASE+134)

;==========================================================================
;
; CLIPPER
;
;==========================================================================
;   VI00    Const (0)
;I  VI01    (Temp)
;I  VI02    (Temp) - Address of solved 3 verts to grab rgbs from 
;I  VI03    Address to return to after clipping
;I  VI04    PlaneTestFlags / Dest address of final clipped fan
;S  VI05    Current Src clip vert buffer addr
;S  VI06    Current Dst clip vert buffer addr
;S  VI07    Num src clip verts
;S  VI08    Num dst clip verts
;S  VI09    (Temp)
;S  VI10    Component to clip by, X=0, Y=1, Z=2
;S  VI11    Curr clip flag    
;S  VI12    Next clip flag
;S  VI13    (Temp) - Loop through planes
;S  VI14    Src clip vert buffer base
;S  VI15    Dst clip vert buffer base
;==========================================================================
;   VF00    Const x=0 y=0 z=0 w=1
;I  VF01    Clip   XYZ 0  /  Current Vert ST
;I  VF02    Clip   XYZ 1  /  Current Vert RGB
;I  VF03    Clip   XYZ 2  /  Current Vert XYZ
;I  VF04    Source ST  0  /  Next    Vert ST
;I  VF05    Source ST  1  /  Next    Vert RGB
;I  VF06    Source ST  2  /  Next    Vert XYZ
;I  VF07    Source RGB 0  /  Interpolated ST
;I  VF08    Source RGB 1  /  Interpolated RGB
;I  VF09    Source RGB 2  /  Interpolated XYZ
;S  VF10    
;S  VF11    
;S  VF12    
;S  VF13    Plane value -1,1
;S  VF14    ZERO
;   VF15    
;   VF16    
;   VF17    
;   VF18    
;   VF19    
;   VF20    Active local to screen matrix qword 0
;   VF21    Active local to screen matrix qword 1
;   VF22    Active local to screen matrix qword 2
;   VF23    Active local to screen matrix qword 3
;   VF24    Active local to clip matrix qword 0 
;   VF25    Active local to clip matrix qword 1 
;   VF26    Active local to clip matrix qword 2 
;   VF27    Active local to clip matrix qword 3 
;   VF28    Active clip to screen matrix qword 0
;   VF29    Active clip to screen matrix qword 1
;   VF30    Active clip to screen matrix qword 2
;   VF31    Active clip to screen matrix qword 3
;==========================================================================

;------------------------------------------------------------------------
;   BACKUP ALL NEEDED REGISTERS
;------------------------------------------------------------------------
CLIPPER_ENTRY:

        ; Increment clipped tri counter
        ;NOP                             ILW.x VI01, 1022(VI00)
        ;NOP                             IADDIU VI01, VI01, 1
        ;NOP                             ISW.x VI01, 1022(VI00)

        NOP                             IADDIU VI01, VI00, CLIPPER_STACK
;        NOP                             SQ.xyzw VF07, 0(VI01)
;        NOP                             SQ.xyzw VF08, 1(VI01)
;        NOP                             SQ.xyzw VF09, 2(VI01)
;        NOP                             SQ.xyzw VF10, 3(VI01)
;        NOP                             SQ.xyzw VF11, 4(VI01)
;        NOP                             SQ.xyzw VF12, 5(VI01)
        NOP                             SQ.xyzw VF13, 6(VI01)
        NOP                             SQ.xyzw VF14, 7(VI01)
        NOP                             ISW.x   VI02, 5(VI01)
        NOP                             ISW.y   VI03, 5(VI01)
        NOP                             ISW.z   VI04, 5(VI01)
        NOP                             ISW.x   VI05, 8(VI01)
        NOP                             ISW.y   VI06, 8(VI01)
        NOP                             ISW.z   VI07, 8(VI01)
        NOP                             ISW.w   VI08, 8(VI01)
        NOP                             ISW.x   VI09, 9(VI01)
        NOP                             ISW.y   VI10, 9(VI01)
        NOP                             ISW.z   VI11, 9(VI01)
        NOP                             ISW.w   VI12, 9(VI01)
        NOP                             ISW.x   VI13,10(VI01)
        NOP                             ISW.y   VI14,10(VI01)
        NOP                             ISW.z   VI15,10(VI01)
        NOP                             ISW.w   VI04,10(VI01)

;------------------------------------------------------------------------
;
;   WRITE INITIAL VERTS TO CLIP BUFFER
;
;   Gif verts and Clip verts are in this order
;
;   VIFHELP_GIFREG_ST,
;   VIFHELP_GIFREG_RGBAQ,
;   VIFHELP_GIFREG_XYZF2,
;
;------------------------------------------------------------------------

        SUB.xyzw VF14, VF14, VF14       NOP
        NOP                             IADDIU VI14, VI00, CLIPPER_VERTS_0  ; set src base addr
        NOP                             IADDIU VI15, VI00, CLIPPER_VERTS_1  ; set dst base addr
        NOP                             IADDIU VI07, VI00, 3                ; set nsrc
        NOP                             IADD   VI12, VI00, VI14

        ITOF0 VF07, VF07                SQ.xyzw VF04, 0(VI12)  ; UV0
        ITOF0 VF08, VF08                SQ.xyzw VF05, 3(VI12)  ; UV1
        ITOF0 VF09, VF09                SQ.xyzw VF06, 6(VI12)  ; UV2
        NOP                             SQ.xyzw VF04, 9(VI12)  ; UV0 

        NOP                             SQ.xyzw VF01, 2(VI12)  ; XYZ0
        NOP                             SQ.xyzw VF02, 5(VI12)  ; XYZ1
        NOP                             SQ.xyzw VF03, 8(VI12)  ; XYZ2
        NOP                             SQ.xyzw VF01, 11(VI12) ; XYZ0

        NOP                             SQ.xyzw VF07, 1(VI12)  ; RGB0
        NOP                             SQ.xyzw VF08, 4(VI12)  ; RGB1
        NOP                             SQ.xyzw VF09, 7(VI12)  ; RGB2
        NOP                             SQ.xyzw VF07, 10(VI12) ; RGB0

;------------------------------------------------------------------------
; LOOP THROUGH THE SIX PLANES
;------------------------------------------------------------------------

        NOP                             IADDIU  VI13, VI00, 6
        NOP                             IADDIU  VI04, VI00, 0xFF            ; Be sure to need plane

PLANE_LOOP:   
        NOP                             IADDI   VI13, VI13, -1
        NOP                             IADDIU  VI01, VI13, CLIPPER_PLANES

        ; Load clipping plane info from table                                                
        NOP                             ILW.z   VI12, 0(VI01)               ; read next mask from table
        NOP                             ILW.y   VI11, 0(VI01)               ; read curr mask from table
        NOP                             ILW.w   VI10, 0(VI01)               ; read component rot from table
        NOP                             LQ.xyzw VF13, 0(VI01)               ; read plane sign from table

        ; Check if we can skip testing against this plane
        NOP                             IBEQ    VI04, VI00, PLANE_SKIP_ALL
        NOP                             IAND    VI01, VI04, VI12            ; test plane bits with next mask
        NOP                             NOP
        NOP                             IBEQ    VI01, VI00, PLANE_SKIP

        ; Increment num planes clipped against
        ;NOP                             ILW.z VI01, 1022(VI00)
        ;NOP                             IADDIU VI01, VI01, 1
        ;NOP                             ISW.z VI01, 1022(VI00)

        ; Setup initial src and dst vert buffers
        NOP                             IADD    VI05, VI00, VI14            ; src clip vert buffer addr
        NOP                             IADD    VI06, VI00, VI15            ; dst clip vert buffer addr
        NOP                             IADDIU  VI08, VI00, 0               ; clear ndst
        NOP                             LQ.xyzw VF06, 2(VI05)               ; load first vert into 'next'
        NOP                             LQ.xyzw VF04, 0(VI05)               ; load first vert into 'next'
        NOP                             LQ.xyzw VF05, 1(VI05)               ; get clip for first vert, load first vert into 'next'
        NOP                             IADDIU VI05, VI05, 3
        NOP                             NOP
        NOP                             NOP
        ; Clear VI04 and re-accumulate plane bits
        NOP                             IADDIU VI04, VI00, 0
        
        
        
        ;NOP                             B CLIPPER_RESTORE_RET   ;*****************************************
        ;NOP                             NOP                     ;*****************************************

PLANE_VERT_LOOP:        

        NOP                             BAL VI02, CLIP_SEG_ENTER            ; get next and check segment
        NOP                             ISUBIU VI07, VI07, 1                ; dec num src verts
        NOP                             NOP
        NOP                             IBNE VI07, VI00, PLANE_VERT_LOOP    ; do loop
        NOP                             NOP
        
        ; Duplicate first vert on end
        NOP                             LQ VF01, 0(VI15)
        NOP                             LQ VF02, 1(VI15)
        NOP                             LQ VF03, 2(VI15)
        NOP                             NOP
        NOP                             SQI VF01, (VI06++)
        NOP                             SQI VF02, (VI06++)
        NOP                             SQI VF03, (VI06++)
        
        ; Flip source and dest ptr/counts
        NOP                             IADD VI07, VI08, VI00            ; copy ndst into nsrc
        NOP                             IADD VI08, VI00, VI00            ; set ndst to zero
        NOP                             IADD VI01, VI14, VI00            ; flip src/dst buffers
        NOP                             IADD VI14, VI15, VI00
        NOP                             IADD VI15, VI01, VI00

        ; Check if we hit 0 verts
        NOP                             IBEQ VI07, VI00, CLIPPER_RESTORE_RET
        NOP                             NOP
   
PLANE_SKIP:   
        
        ; Check if we have clipped to all planes
        NOP                             IBNE VI13, VI00, PLANE_LOOP
        NOP                             NOP

;------------------------------------------------------------------------
;   Transform clipped verts into final buffer
;------------------------------------------------------------------------
PLANE_SKIP_ALL:

        ; Kick 0-vert giftag for stall
        NOP                             IADDIU VI01, VI00, CLIPPER_GIF_STALL
        NOP                             NOP
        NOP                             XGKICK VI01
        NOP                             NOP

        ; Decide whether to do single_vert or not
        NOP                             IADDIU VI01, VI00, 0x01
        NOP                             IAND VI02, VI07, VI01

        ; Get copy of num of verts
        NOP                             IADD VI01, VI00, VI07
        
        ; Get src vert address and load first values
        NOP                             IADD VI05, VI14, VI00
        NOP                             LQ VF01, 2(VI05)                ; load xyz
        NOP                             LQ VF02, 0(VI05)                ; load st
        NOP                             LQ VF03, 1(VI05)                ; load rgb

        ; Get dst address
        NOP                             IADDIU VI04, VI00, CLIPPER_GIF_VERTS_0
        NOP                             IADDI VI06, VI04, 1
        
        ; Check if we need to do a single vert before doubles
        NOP                             IBEQ VI02, VI00, CLIPPER_TRANSFORM_DOUBLE                  
        NOP                             NOP

CLIPPER_TRANSFORM_SINGLE:

        ; Load XYZ, ST, RGB
        MULAx.xyzw  ACC, VF28, VF01x    NOP                             ; transform V0 into screen
        MADDAy.xyzw ACC, VF29, VF01y    NOP                             ; transform V0 into screen
        MADDAz.xyzw ACC, VF30, VF01z    NOP                             ; transform V0 into screen
        MADDw.xyzw VF04, VF31, VF01w    NOP                             ; transform V0 into screen
        FTOI0 VF06, VF03                NOP                             ; convert rgb from float to int
        NOP                             IADDI VI05, VI05, 3             ; increment source ptr
        NOP                             NOP
        NOP                             DIV Q, VF00w, VF04w             ; Do perspective divide
        NOP                             WAITQ
        MULQ VF04, VF04, Q              NOP                             ; project xyz
        MULQ.xyz VF05, VF02, Q          NOP                             ; compute stq
        NOP                             LQ VF01, 2(VI05)                ; load xyz
        NOP                             LQ VF02, 0(VI05)                ; load st 
        FTOI4 VF04, VF04                LQ VF03, 1(VI05)                ; load rgb ; convert xyz from float to fixed
        NOP                             SQ VF05, 0(VI06)                ; store stq
        NOP                             SQ VF06, 1(VI06)                ; store rgb
        NOP                             IADDI VI01, VI01, -1            ; decrement loop count
        NOP                             SQ VF04, 2(VI06)                ; store xyz
        NOP                             IADDI VI06, VI06, 3             ; increment dest ptr
        
CLIPPER_TRANSFORM_DOUBLE:

        ; Load XYZ, ST, RGB
        MULAx.xyzw  ACC, VF28, VF01x    LQ VF07, 5(VI05)                ; load xyz2 ; transform V1 into screen
        MADDAy.xyzw ACC, VF29, VF01y    LQ VF08, 3(VI05)                ; load st2 ; transform V1 into screen
        MADDAz.xyzw ACC, VF30, VF01z    LQ VF09, 4(VI05)                ; load rgb2; transform V1 into screen
        MADDw.xyzw VF04, VF31, VF01w    IADDI VI05, VI05, 6             ; transform V1 into screen
        FTOI0 VF06, VF03                NOP                             ; convert rgb from float to int
        MULAx.xyzw  ACC, VF28, VF07x    NOP                             ; transform V2 into screen      
        MADDAy.xyzw ACC, VF29, VF07y    NOP                             ; transform V2 into screen      
        MADDAz.xyzw ACC, VF30, VF07z    DIV Q, VF00w, VF04w             ; transform V2 into screen      ; Do perspective divide
        MADDw.xyzw VF07, VF31, VF07w    NOP                             ; transform V2 into screen      
        FTOI0 VF09, VF09                NOP                             ; convert rgb from float to int 
        NOP                             NOP
        NOP                             NOP
        NOP                             NOP
        NOP                             NOP
        MULQ VF04, VF04, Q              NOP                             ; project xyz
        MULQ.xyz VF05, VF02, Q          NOP                             ; compute stq
        NOP                             DIV Q, VF00w, VF07w             ; Do perspective divide
        NOP                             NOP
        FTOI4 VF04, VF04                NOP                             ; convert xyz from float to fixed
        NOP                             SQ VF05, 0(VI06)                ; store stq
        NOP                             SQ VF06, 1(VI06)                ; store rgb
        NOP                             NOP
        NOP                             SQ VF04, 2(VI06)                ; store xyz
        MULQ VF07, VF07, Q              NOP                             ; project xyz
        MULQ.xyz VF08, VF08, Q          NOP                             ; compute stq
        NOP                             LQ VF01, 2(VI05)                ; load xyz 
        NOP                             LQ VF02, 0(VI05)                ; load st  
        FTOI4 VF07, VF07                LQ VF03, 1(VI05)                ; load rgb ; convert xyz from float to fixed
        NOP                             SQ VF08, 3(VI06)                ; store stq
        NOP                             SQ VF09, 4(VI06)                ; store rgb
        NOP                             IADDI VI01, VI01, -2            ; decrement loop count
        NOP                             SQ VF07, 5(VI06)                ; store xyz
        NOP                             IBNE VI01, VI00, CLIPPER_TRANSFORM_DOUBLE
        NOP                             IADDI VI06, VI06, 6             ; increment dest ptr
        
;------------------------------------------------------------------------
;   Clear and kick empty giftag to cause stall if needed
;------------------------------------------------------------------------
        
        ; Set fan giftag count to num of src verts
        NOP                             IADDIU VI01, VI00, 0x7FFF           
        NOP                             IADDIU VI01, VI01, 0x01             
        NOP                             IADD   VI01, VI01, VI07
        NOP                             ISW.x  VI01, 0(VI04)

        ; Increment num tris surviving
        ;NOP                             ILW.y VI01, 1022(VI00)
        ;NOP                             IADDIU VI01, VI01, 1
        ;NOP                             ISW.y VI01, 1022(VI00)

        ; Kick fan giftag
        NOP                             NOP
        NOP                             NOP
        NOP                             NOP
        NOP                             XGKICK VI04
        NOP                             NOP

;------------------------------------------------------------------------
;   RESTORE ALL NEEDED REGISTERS
;------------------------------------------------------------------------

CLIPPER_RESTORE_RET:

        NOP                             IADDIU VI01, VI00, CLIPPER_STACK
;        NOP                             LQ.xyzw VF07, 0(VI01)
;        NOP                             LQ.xyzw VF08, 1(VI01)
;        NOP                             LQ.xyzw VF09, 2(VI01)
;        NOP                             LQ.xyzw VF10, 3(VI01)
;        NOP                             LQ.xyzw VF11, 4(VI01)
;        NOP                             LQ.xyzw VF12, 5(VI01)
        NOP                             LQ.xyzw VF13, 6(VI01)
        NOP                             LQ.xyzw VF14, 7(VI01)
        NOP                             ILW.x   VI02, 5(VI01)
        NOP                             ILW.y   VI03, 5(VI01)
        NOP                             ILW.z   VI04, 5(VI01)
        NOP                             ILW.x   VI05, 8(VI01)
        NOP                             ILW.y   VI06, 8(VI01)
        NOP                             ILW.z   VI07, 8(VI01)
        NOP                             ILW.w   VI08, 8(VI01)
        NOP                             ILW.x   VI09, 9(VI01)
        NOP                             ILW.y   VI10, 9(VI01)
        NOP                             ILW.z   VI11, 9(VI01)
        NOP                             ILW.w   VI12, 9(VI01)
        NOP                             ILW.x   VI13,10(VI01)
        NOP                             ILW.y   VI14,10(VI01)
        NOP                             ILW.z   VI15,10(VI01)
        NOP                             ILW.w   VI04,10(VI01)

;------------------------------------------------------------------------
;   RETURN TO CALLER
;------------------------------------------------------------------------
CLIPPER_RET:
        NOP                             JR VI15
        NOP                             NOP


;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;   CHECK SEGMENT AND DO CLIPPING OF NECESSARY
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------

#define Curr_ST1(__x__)		VF01 ## __x__
#define Curr_RGB(__x__)		VF02 ## __x__
#define Curr_XYZ(__x__)		VF03 ## __x__

#define Next_ST1(__x__)		VF04 ## __x__
#define Next_RGB(__x__)		VF05 ## __x__
#define Next_XYZ(__x__)		VF06 ## __x__

#define Clip_ST1(__x__)		VF07 ## __x__
#define Clip_RGB(__x__)		VF08 ## __x__
#define Clip_XYZ(__x__)		VF09 ## __x__

#define ZERO				VF14
#define TEMP				VF15

#define PlaneBits			VI04
#define ClipBits			VI09
#define CurrMask			VI11
#define NextMask			VI12

#define SWAP                1


CLIP_SEG_ENTER:

        ADD.xyzw Curr_XYZ(xyzw), ZERO, Next_XYZ(xyzw)       		LQ.xyzw Next_XYZ(xyzw), 2(VI05)               	; move next into current
        ADD.xyzw Curr_ST1(xyzw), ZERO, Next_ST1(xyzw)       		LQ.xyzw Next_ST1(xyzw), 0(VI05)               	; and load next
        ADD.xyzw Curr_RGB(xyzw), ZERO, Next_RGB(xyzw)       		LQ.xyzw Next_RGB(xyzw), 1(VI05)               
        NOP                             							IADDIU VI05, VI05, 3
        CLIPw.xyz Curr_XYZ(xyz), Curr_XYZ(w)   						NOP
        CLIPw.xyz Next_XYZ(xyz), Next_XYZ(w)						NOP

		NOP                             							NOP
        NOP                             							NOP
        NOP                             							NOP
        NOP                             							FCGET VI01										; get copy of clip flags
        NOP                             							IAND ClipBits, VI01, CurrMask          			; check if current is in
        NOP                             							IOR  PlaneBits, PlaneBits, VI01        			; BDS for IAND, collect bits for plane culling
        NOP                             							IBNE ClipBits, VI00, CLIP_SEG_CURR_OUT 			; Branch if curr is out
        NOP                             							IAND ClipBits, VI01, NextMask					; BDS, check if next is in

        NOP                             							SQI.xyzw Curr_ST1(xyzw), (VI06++)				; add current to output
        NOP                             							SQI.xyzw Curr_RGB(xyzw), (VI06++)   			
        NOP                             							SQI.xyzw Curr_XYZ(xyzw), (VI06++)   			
        NOP                             							IADDIU VI08, VI08, 1                			
		NOP															IADD ClipBits, ClipBits, NextMask				; toggle clip bit
		NOP															IAND ClipBits, ClipBits, NextMask				; add/and is like xor

;------------------------------------------------------------------------

        NOP                             							NOP
		NOP															IBNE ClipBits, VI00, CLIP_SEG_EXIT2				; if bit is set, skip intersection
        NOP                             							NOP                                				

#if SWAP        
		NOP															MOVE TEMP, Curr_ST1(xyzw)
		NOP															MOVE Curr_ST1(xyzw), Next_ST1(xyzw)
		NOP															MOVE Next_ST1(xyzw), TEMP
		NOP															MOVE TEMP, Curr_RGB(xyzw)
		NOP															MOVE Curr_RGB(xyzw), Next_RGB(xyzw)
		NOP															MOVE Next_RGB(xyzw), TEMP
		NOP															MOVE TEMP, Curr_XYZ(xyzw)
		NOP															MOVE Curr_XYZ(xyzw), Next_XYZ(xyzw)
		NOP															MOVE Next_XYZ(xyzw), TEMP
#endif

		NOP                             							BAL VI01, INTERPOLATE              				; branch to segment intersection
        NOP                             							NOP                                				
        CLIPw.xyz Clip_XYZ(xyz), Clip_XYZ(w)						NOP                                				; get clip flags for new point
		NOP                             							SQI Clip_ST1(xyzw), (VI06++)       				; store new point
        NOP                             							SQI Clip_RGB(xyzw), (VI06++)                 				
        NOP                             							SQI Clip_XYZ(xyzw), (VI06++)                 				
        NOP                             							IADDIU VI08, VI08, 1               				
        NOP                             							FCGET VI01                         				; get copy of clip flags
        NOP                             							IOR  PlaneBits, PlaneBits, VI01    				; collect bits for plane culling


#if SWAP		
		NOP															MOVE TEMP, Curr_ST1(xyzw)
		NOP															MOVE Curr_ST1(xyzw), Next_ST1(xyzw)
		NOP															MOVE Next_ST1(xyzw), TEMP
		NOP															MOVE TEMP, Curr_RGB(xyzw)
		NOP															MOVE Curr_RGB(xyzw), Next_RGB(xyzw)
		NOP															MOVE Next_RGB(xyzw), TEMP
		NOP															MOVE TEMP, Curr_XYZ(xyzw)
		NOP															MOVE Curr_XYZ(xyzw), Next_XYZ(xyzw)
		NOP															MOVE Next_XYZ(xyzw), TEMP
#endif
        

CLIP_SEG_EXIT2:

        NOP                             JR VI02
        NOP                             NOP

;------------------------------------------------------------------------

CLIP_SEG_CURR_OUT: ; Current is outside
        
        NOP                             							NOP
		NOP															IBNE ClipBits, VI00, CLIP_SEG_EXIT				; if bit is set, skip intersection
        NOP                             							NOP                                				
        NOP                             							BAL VI01, INTERPOLATE              				; branch to segment intersection
        NOP                             							NOP                                				
        CLIPw.xyz Clip_XYZ(xyz), Clip_XYZ(w)						NOP                                				; get clip flags for new point
		NOP                             							SQI Clip_ST1(xyzw), (VI06++)       				; store new point
        NOP                             							SQI Clip_RGB(xyzw), (VI06++)                 				
        NOP                             							SQI Clip_XYZ(xyzw), (VI06++)                 				
        NOP                             							IADDIU VI08, VI08, 1               				
        NOP                             							FCGET VI01                         				; get copy of clip flags
        NOP                             							IOR  PlaneBits, PlaneBits, VI01    				; collect bits for plane culling
		
CLIP_SEG_EXIT:

        NOP                             							JR VI02
        NOP                             							NOP
        
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;   DO INTERSECTION CALCULATION
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------
;------------------------------------------------------------------------

INTERPOLATE:

		NOP								NOP;IADDIU VI09, VI10, ROTATE_TABLE ; Compute where to jump for rotation
        MULx.w VF08w, VF06w, VF13x      NOP 							; S * Nw
        MULx.w VF07w, VF03w, VF13x      NOP								; S * Cw
        SUBw.xyzw VF08, VF06, VF08w     NOP 							; Nxyz - S*Nw
        SUBw.xyzw VF07, VF03, VF07w     NOP 							; Cxyz - S*Cw
        SUB.xyzw VF08, VF08, VF07       NOP 							; (Nxyz-S*Nw) - (Cxyz-S*Cw)
		ABS.xyz VF07, VF07				NOP;JR VI09
		ABS.xyz VF08, VF08				NOP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        NOP                             IADDIU VI09, VI10, 0
        NOP                             NOP
        NOP                             IBEQ VI09, VI00, NOROT
        NOP                             NOP
ROT:
        NOP                             ISUBIU VI09, VI09, 1

        NOP                             MR32.xyzw VF07, VF07			
        NOP                             MR32.xyzw VF08, VF08

        NOP                             IBNE VI09, VI00, ROT
        NOP                             NOP        
NOROT:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;


/*
ROTATE_TABLE:
		; To rotate component twice to Z, jump here
        NOP                             MR32.xyzw VF07, VF07			
        NOP                             MR32.xyzw VF08, VF08
		; To rotate component once to Y, jump here
        NOP                             MR32.xyzw VF07, VF07			
        NOP                             MR32.xyzw VF08, VF08
		; To rotate component none to X, jump here
*/
        NOP                             NOP
        NOP                             NOP
        NOP                             NOP
        NOP                             DIV Q, VF07x, VF08x		; T = (C? - S*Cw) / ((N?-S*Nw) - (C?-S*Cw))
        SUB.xyzw VF07, VF04, VF01       NOP						; N - C
        SUB.xyzw VF08, VF05, VF02       NOP						; N - C
        SUB.xyzw VF09, VF06, VF03       NOP						; N - C
        NOP                             WAITQ
        MULQ VF07, VF07, Q    			NOP						; T*(N-C)
        MULQ VF08, VF08, Q     			NOP						; T*(N-C)
        MULQ VF09, VF09, Q     			NOP						; T*(N-C)
        ADD.xyzw VF07, VF07, VF01       NOP						; C + T*(N-C)
        ADD.xyzw VF08, VF08, VF02       NOP						; C + T*(N-C)
        ADD.xyzw VF09, VF09, VF03       NOP						; C + T*(N-C)

        NOP                             JR VI01
        NOP                             NOP

;------------------------------------------------------------------------

CLIPPER_BOOT:

        ; Store clipping planes out as data
        NOP                             IADDIU VI04, VI00, CLIPPER_PLANES
        ADDw.x VF01x, VF00x, VF00w      NOP     ; X=+1
        SUBw.x VF02x, VF00x, VF00w      NOP     ; X=-1

        ; Y+,Y-
        NOP                             IADDIU VI01, VI00, 0x100
        NOP                             IADDIU VI02, VI00, 0x004
        NOP                             IADDIU VI03, VI00, 1;2;1
        NOP                             SQ     VF01, 0(VI04)
        NOP                             ISW.y  VI01, 0(VI04)
        NOP                             ISW.z  VI02, 0(VI04)
        NOP                             ISW.w  VI03, 0(VI04)
        NOP                             IADDIU VI01, VI00, 0x200
        NOP                             IADDIU VI02, VI00, 0x008
        NOP                             SQ     VF02, 1(VI04)
        NOP                             ISW.y  VI01, 1(VI04)
        NOP                             ISW.z  VI02, 1(VI04)
        NOP                             ISW.w  VI03, 1(VI04)
        
        ; X+,X-
        NOP                             IADDIU VI01, VI00, 0x040
        NOP                             IADDIU VI02, VI00, 0x001
        NOP                             IADDIU VI03, VI00, 0;4;0
        NOP                             SQ     VF01, 2(VI04)
        NOP                             ISW.y  VI01, 2(VI04)
        NOP                             ISW.z  VI02, 2(VI04)
        NOP                             ISW.w  VI03, 2(VI04)
        NOP                             IADDIU VI01, VI00, 0x080
        NOP                             IADDIU VI02, VI00, 0x002
        NOP                             SQ     VF02, 3(VI04)
        NOP                             ISW.y  VI01, 3(VI04)
        NOP                             ISW.z  VI02, 3(VI04)
        NOP                             ISW.w  VI03, 3(VI04)
        
        ; Z+,Z-
        NOP                             IADDIU VI01, VI00, 0x400
        NOP                             IADDIU VI02, VI00, 0x010
        NOP                             IADDIU VI03, VI00, 2;0;2
        NOP                             SQ     VF01, 4(VI04)
        NOP                             ISW.y  VI01, 4(VI04)
        NOP                             ISW.z  VI02, 4(VI04)
        NOP                             ISW.w  VI03, 4(VI04)
        NOP                             IADDIU VI01, VI00, 0x800
        NOP                             IADDIU VI02, VI00, 0x020
        NOP                             SQ     VF02, 5(VI04)
        NOP                             ISW.y  VI01, 5(VI04)
        NOP                             ISW.z  VI02, 5(VI04)
        NOP                             ISW.w  VI03, 5(VI04)

        ; Build a dummy giftag 
        SUB.xyzw VF01, VF00, VF00       NOP
        NOP                             SQ VF01, CLIPPER_GIF_STALL(VI00)
        NOP                             IADDIU VI01, VI00, 0x7FFF           
        NOP                             IADDIU VI01, VI01, 0x01
        NOP                             ISW.x VI01, CLIPPER_GIF_STALL(VI00)

        NOP                             JR VI15
        NOP                             NOP
        
